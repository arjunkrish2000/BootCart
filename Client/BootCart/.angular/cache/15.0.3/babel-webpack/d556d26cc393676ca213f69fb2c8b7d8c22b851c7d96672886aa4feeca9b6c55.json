{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class ErrorInterceptor {\n  constructor(router) {\n    this.router = router;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(err => {\n      if (err.status === 401) {\n        // auto logout if 401 response returned from api\n        this.router.navigate([\"auth\", \"login\"]);\n      }\n      const error = err.error.message || err.statusText;\n      return throwError(() => {\n        new Error(error);\n      });\n    }));\n  }\n}\nErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n  return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router));\n};\nErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorInterceptor,\n  factory: ErrorInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAGA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAI3C,OAAM,MAAOC,gBAAgB;EACzBC,YAAoBC,MAAa;IAAb,WAAM,GAANA,MAAM;EAAW;EAErCC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IAClD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAACR,UAAU,CAACS,GAAG,IAAG;MAC9C,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;QACpB;QACA,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;;MAG3C,MAAMC,KAAK,GAAGH,GAAG,CAACG,KAAK,CAACC,OAAO,IAAIJ,GAAG,CAACK,UAAU;MACjD,OAAOf,UAAU,CAAC,MAAI;QAClB,IAAIgB,KAAK,CAACH,KAAK,CAAC;MACpB,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;EACP;;AAfSX,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAe,SAAhBf,gBAAgB;AAAA","names":["throwError","catchError","ErrorInterceptor","constructor","router","intercept","request","next","handle","pipe","err","status","navigate","error","message","statusText","Error","factory"],"sourceRoot":"","sources":["C:\\Users\\arjun.jg\\Documents\\GitHub\\BootCart\\Client\\BootCart\\src\\app\\helpers\\interceptors\\errorInterceptor.ts"],"sourcesContent":["import { Router } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n    constructor(private router:Router) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(catchError(err => {\r\n            if (err.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                this.router.navigate([\"auth\", \"login\"]);\r\n            }\r\n\r\n            const error = err.error.message || err.statusText;\r\n            return throwError(()=>{\r\n                new Error(error);\r\n            });\r\n        }))\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}